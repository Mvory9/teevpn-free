import { InlineKeyboardBuilder, MediaSource } from "puregram";
import { createWireGuardClient, getWireGuardClientDataByConfigId, getWireguardClientConfig, configEdit, formatBytes } from "../services/wireguard.js";
import { telegram, sendMessage, sendPhoto, sendDocument } from "./telegram.js";
import { generateQR } from "../services/qrcode.js";
import db from "../db/mongodb.js";
import { v4 as uuidv4 } from 'uuid';

export function initCallbacks() {
    telegram.updates.on("callback_query", async (context) => {
        const errorId = uuidv4();
        try {
            if (!context.queryPayload || typeof context.queryPayload !== 'string' || context.queryPayload.length > 100) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π payload –∫–æ–ª–ª–±—ç–∫–∞');
            }
            if (!context.from || !context.from.id || !/^\d+$/.test(context.from.id)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            console.log(`[INFO][${context.from.id}]: Callback received: ${context.queryPayload}`);

            let user = await db.getUser(context.from.id);
            if (!user) {
                user = await db.regUser(context.from.id);
                if (!user) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
            }

            if (context.queryPayload === `accept_terms`) {
                if (user.isAcceptTerms) {
                    const text = `–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º VPN –æ—Ç <a href="${process.env.ORIGINAL_PROJECT}">${process.env.ORIGINAL_PROJECT_NAME}</a>.`;
                    await sendMessage(context.from.id, text, { parse_mode: "html" });
                    return;
                }

                user.isAcceptTerms = true;
                await user.save();

                const { firstName, lastName } = context.from;
                const fullName = `${firstName || ""} ${lastName || ""}`.trim() || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

                const text = `–°–ø–∞—Å–∏–±–æ, <b>${fullName}</b>! üéâ\n\n` +
                    `–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º VPN –æ—Ç <a href="${process.env.ORIGINAL_PROJECT}">${process.env.ORIGINAL_PROJECT_NAME}</a>.\n` +
                    `–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ <b>1 –ì–ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å. üåô\n\n` +
                    `–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ!`;

                const keyboard = new InlineKeyboardBuilder()
                    .textButton({ text: "–ù–∞—á–∞—Ç—å", payload: "start" });

                await sendMessage(context.from.id, text, { parse_mode: "html", reply_markup: keyboard });
                return;
            }

            if (!user.isAcceptTerms) {
                const { firstName, lastName } = context.from;
                const fullName = `${firstName || ""} ${lastName || ""}`.trim() || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

                const text =
                    `–ü—Ä–∏–≤–µ—Ç, <b>${fullName}</b>! üëã\n\n` +
                    `–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º VPN –æ—Ç <a href="${process.env.ORIGINAL_PROJECT}">${process.env.ORIGINAL_PROJECT_NAME}</a>.\n` +
                    `–¢—ã –ø–æ–ª—É—á–∏—à—å <b>1 –ì–ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å. üåô\n\n` +
                    `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏ –Ω–∞—à–∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n` +
                    `<b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n` +
                    `1. VPN –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n` +
                    `2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—é–±—ã—Ö –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n` +
                    `3. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.\n\n` +
                    `<b>–ü–æ—á–µ–º—É VPN –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π?</b> ü§î\n` +
                    `–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n` +
                    `–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n` +
                    `–°–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN! üöÄ\n`;

                const keyboard = new InlineKeyboardBuilder()
                    .textButton({ text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –Ω–∞—á–∞—Ç—å", payload: "accept_terms" });

                await sendMessage(context.from.id, text, { parse_mode: "html", reply_markup: keyboard });
                return;
            }

            if (context.queryPayload === "start") {
                const { firstName, lastName } = context.from;
                const fullName = `${firstName || ""} ${lastName || ""}`.trim() || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

                const text =
                    `–ü—Ä–∏–≤–µ—Ç, <b>${fullName}</b>! üëã\n\n` +
                    `–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º VPN –æ—Ç <a href="${process.env.ORIGINAL_PROJECT}">${process.env.ORIGINAL_PROJECT_NAME}</a>.\n` +
                    `–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN —Å <b>1 –ì–ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å. üåô\n\n` +
                    `–ü–æ–º–æ—â—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help –ª–∏–±–æ —É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n` +
                    `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! üöÄ\n`;

                const keyboard = new InlineKeyboardBuilder()
                    .textButton({ text: "üõí –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", payload: "get_free_configs_1" })
                    .textButton({ text: "üíº –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", payload: "my_configs_1" })
                    .row()
                    .textButton({ text: "üñ• –°–µ—Ä–≤–µ—Ä–∞", payload: "servers" })
                    .row()
                    .urlButton({ text: "üí¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url: process.env.SUPPORT_LINK });

                await sendMessage(context.from.id, text, { parse_mode: "html", reply_markup: keyboard });
            }

            if (context.queryPayload.startsWith(`get_free_configs_`)) {
                const page = parseInt(context.queryPayload.split("_")[3] || 1, 10);
                if (isNaN(page) || page < 1) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                }
                const maxConfigsOnPage = 6;

                const text = `üåç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`;

                const keyboard = new InlineKeyboardBuilder();
                const countries = (await db.getCountries()).slice((page - 1) * maxConfigsOnPage, page * maxConfigsOnPage);
                if (!countries || !Array.isArray(countries)) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω');
                }

                const pages = Math.ceil(countries.length / maxConfigsOnPage);
                for (const country of countries) {
                    if (!country.countryEn || typeof country.countryEn !== 'string' || country.countryEn.length > 50) {
                        continue;
                    }
                    keyboard.textButton({
                        text: `${country.flag} ${country.country}`,
                        payload: `country_${country.countryEn}_1`
                    })
                    .row();
                }

                keyboard
                    .textButton({
                        text: "<",
                        payload: `get_free_configs_${Math.max(1, page - 1)}`
                    })
                    .textButton({
                        text: `${page}/${pages}`,
                        payload: "none"
                    })
                    .textButton({
                        text: ">",
                        payload: `get_free_configs_${Math.min(pages, page + 1)}`
                    })
                    .row()
                    .textButton({
                        text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        payload: "start"
                    });

                await sendMessage(context.from.id, text, {
                    parse_mode: "html",
                    reply_markup: keyboard
                });
            }

            if (context.queryPayload.startsWith("country_")) {
                const countryEn = context.queryPayload.split("_")[1];
                const page = parseInt(context.queryPayload.split("_")[2] || 1, 10);
                if (!countryEn || typeof countryEn !== 'string' || countryEn.length > 50 || isNaN(page) || page < 1) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                }
                const maxCountriesOnPage = 6;

                const text = `üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`;

                const keyboard = new InlineKeyboardBuilder();
                const servers = (await db.getServersByCountry(countryEn)).slice((page - 1) * maxCountriesOnPage, page * maxCountriesOnPage);
                if (!servers || !Array.isArray(servers)) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤');
                }

                const pages = Math.ceil(servers.length / maxCountriesOnPage);
                for (const server of servers) {
                    const country = await db.getCountry({ country: server.country });
                    if (!country) {
                        continue;
                    }
                    keyboard.textButton({
                        text: `${country.flag} ${server.country} (${server.city})`,
                        payload: `server_${server.serverLocationName}`
                    })
                    .row();
                }

                keyboard
                    .textButton({
                        text: "<",
                        payload: `country_${countryEn}_${Math.max(1, page - 1)}`
                    })
                    .textButton({
                        text: `${page}/${pages}`,
                        payload: "none"
                    })
                    .textButton({
                        text: ">",
                        payload: `country_${countryEn}_${Math.min(pages, page + 1)}`
                    })
                    .row()
                    .textButton({
                        text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        payload: "get_free_configs_1"
                    });

                await sendMessage(context.from.id, text, {
                    parse_mode: "html",
                    reply_markup: keyboard
                });
            }

            if (context.queryPayload.startsWith("server_")) {
                const serverLocationName = context.queryPayload.split("_")[1];
                if (!serverLocationName || typeof serverLocationName !== 'string' || serverLocationName.length > 50) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ª–æ–∫–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
                }

                const server = await db.getServer({ serverLocationName });
                if (!server) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }

                const userConfigs = await db.getConfigs({ telegramId: context.from.id, serverLocationName });
                if (!Array.isArray(userConfigs)) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
                if (userConfigs.length > 0) {
                    await sendMessage(context.from.id, `‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é.`);
                    return;
                }

                const text = `üõ† –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.country} (${server.city})...`;
                await sendMessage(context.from.id, text);

                try {
                    const configData = await createWireGuardClient(server, context.from.id);
                    if (!configData) {
                        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WireGuard –∫–ª–∏–µ–Ω—Ç–∞');
                    }

                    const text = `‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
                        `üìç <b>–°—Ç—Ä–∞–Ω–∞:</b> ${server.country}\n` +
                        `üåÜ <b>–ì–æ—Ä–æ–¥:</b> ${server.city}\n` +
                        `üñ• <b>–°–µ—Ä–≤–µ—Ä:</b> ${server.serverLocationName}\n` +
                        `üîë <b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> ${configData.id}\n\n` +
                        `üì• <b>–°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –í–∞—à–∏—Ö VPN:</b>\n`;

                    const keyboard = new InlineKeyboardBuilder()
                        .textButton({
                            text: "–ú–æ–∏ VPN",
                            payload: `my_configs_1`
                        });

                    await sendMessage(context.from.id, text, { parse_mode: "html", reply_markup: keyboard });
                } catch (error) {
                    console.error(`[ERROR][${errorId}][${context.from.id}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${serverLocationName}:`, error);
                    await sendMessage(context.from.id, 
                        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (${process.env.SUPPORT_LINK}) —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ ${errorId}`, 
                        { parse_mode: "html" }
                    );
                }
            }

            if (context.queryPayload.startsWith("my_configs_")) {
                let page = parseInt(context.queryPayload.split("_")[2], 10);
                if (isNaN(page) || page < 1) {
                    page = 1;
                }
                const maxConfigsOnPage = 6;

                const allConfigs = await db.getConfigs({ telegramId: context.from.id });
                if (!Array.isArray(allConfigs)) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
                const configs = allConfigs.slice((page - 1) * maxConfigsOnPage, page * maxConfigsOnPage);

                const pages = Math.max(1, Math.ceil(allConfigs.length / maxConfigsOnPage));

                const text = allConfigs.length === 0
                    ? "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ –º–µ–Ω—é!"
                    : `üìÇ –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`;

                const keyboard = new InlineKeyboardBuilder();
                if (allConfigs.length > 0) {
                    for (const config of configs) {
                        const server = await db.getServer({ serverLocationName: config.serverLocationName });
                        if (!server) {
                            continue;
                        }
                        const country = await db.getCountry({ country: server.country });
                        if (!country) {
                            continue;
                        }
                        keyboard.textButton({
                            text: `${country.flag} ${server.country} (${server.city})${config.customName ? ` - ${config.customName}` : ""}`,
                            payload: `config_${config.configId}`
                        })
                        .row();
                    }

                    keyboard
                        .textButton({
                            text: "<",
                            payload: `my_configs_${Math.max(1, page - 1)}`
                        })
                        .textButton({
                            text: `${page}/${pages}`,
                            payload: "none"
                        })
                        .textButton({
                            text: ">",
                            payload: `my_configs_${Math.min(pages, page + 1)}`
                        })
                        .row();
                }

                keyboard.textButton({
                    text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    payload: "start"
                });

                await sendMessage(context.from.id, text, {
                    parse_mode: "html",
                    reply_markup: keyboard
                });
            }

            if (context.queryPayload.startsWith("config_")) {
                const configId = context.queryPayload.split("_")[1];
                if (!configId || !/^[0-9a-f-]{36}$/.test(configId)) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                }

                const config = await db.getConfig({ configId, telegramId: context.from.id });
                if (!config) {
                    await sendMessage(context.from.id, 
                        `‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (${process.env.SUPPORT_LINK}) —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ ${errorId}`, 
                        { parse_mode: "html" }
                    );
                    return;
                }

                const server = await db.getServer({ serverLocationName: config.serverLocationName });
                if (!server) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                const country = await db.getCountry({ country: server.country });
                if (!country) {
                    throw new Error('–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }
                const configData = await getWireGuardClientDataByConfigId(server, configId);
                if (!configData) {
                    throw new Error('–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }

                const protocolLabel = server.type === "wg" ? "WireGuard" : "AmneziaWG";

                const features = [];
                if (server.properties.youtubeNoAds) features.push("üì∫ YouTube –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã");
                if (server.properties.gemini) features.push("ü§ñ –î–æ—Å—Ç—É–ø –∫ Gemini");
                if (server.properties.monthlyIpChange) features.push("üîÑ IP –º–µ–Ω—è–µ—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ");

                const featuresText = features.length ? 
                    `\n\n‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n${features.join("\n")}` : 
                    "\n\n‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –ë–∞–∑–æ–≤—ã–µ";

                const text = `<b>üîê VPN: ${country.flag} ${server.country} (${protocolLabel}) ${config.customName ? `- ${config.customName}` : ""}</b>\n\n` +
                    `üåç ${country.city} (${server.country})\n` +
                    `üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: <b>${protocolLabel}</b>\n` +
                    `ü§ù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${configData.latestHandshakeAt || '–ù–∏–∫–æ–≥–¥–∞'}\n` +
                    `üì∂ –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:\n` +
                    `  ‚ÜóÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${formatBytes(configData.transferTx || 0)}\n` +
                    `  ‚ÜôÔ∏è –ü—Ä–∏–Ω—è—Ç–æ: ${formatBytes(configData.transferRx || 0)}` +
                    featuresText + 
                    `\n\n<b>‚úèÔ∏è –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ?</b>\n` +
                    `<code>/rename ${config.configId} [–Ω–∞–∑–≤–∞–Ω–∏–µ]</code>\n` +
                    `üìù –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.\n` +
                    `üîÑ –î–ª—è —Å–±—Ä–æ—Å–∞: <code>/rename ${config.configId} —Å–±—Ä–æ—Å</code>\n\n`;

                const keyboard = new InlineKeyboardBuilder()
                    .textButton({
                        text: `üìÇ ${protocolLabel} .conf`,
                        payload: `conf_${server.serverLocationName}_${configId}`
                    })
                    .textButton({
                        text: `üîê ${protocolLabel} QR`,
                        payload: `qr_${server.serverLocationName}_${configId}`
                    })
                    .row()
                    .textButton({ 
                        text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                        payload: `delete_${server.serverLocationName}_${configId}` 
                    })
                    .row()
                    .textButton({ 
                        text: "üîô –ù–∞–∑–∞–¥", 
                        payload: `my_configs_1` 
                    });

                await sendMessage(context.from.id, text, { parse_mode: "html", reply_markup: keyboard });
            }

            if (context.queryPayload.startsWith("conf_")) {
                const serverLocationName = context.queryPayload.split("_")[1];
                const configId = context.queryPayload.split("_")[2];
                if (!serverLocationName || !configId || !/^[0-9a-f-]{36}$/.test(configId)) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                }

                const server = await db.getServer({ serverLocationName });
                if (!server) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                const country = await db.getCountry({ country: server.country });
                if (!country) {
                    throw new Error('–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }
                const configData = await getWireguardClientConfig(server, configId);
                if (!configData) {
                    throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }

                const protocolLabel = server.type === "wg" ? "WireGuard" : "AmneziaWG";

                const modifiedConfig = configEdit(JSON.stringify(configData.data), protocolLabel).replaceAll(server.ip, `${serverLocationName.replaceAll("-", "").toLowerCase()}.${process.env.DOMAIN}`);
                const text = `üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${protocolLabel} –¥–ª—è ${serverLocationName} (${country.flag} ${country.city}, ${country.country})`;

                const keyboard = new InlineKeyboardBuilder()
                    .textButton({
                        text: "üîô –ù–∞–∑–∞–¥",
                        payload: `config_${configId}`
                    });

                const document = MediaSource.buffer(Buffer.from(modifiedConfig, "utf-8"), {
                    filename: `${serverLocationName.replaceAll("-", "").slice(0, 4)}${context.from.id}.conf`
                });

                await sendDocument(context.from.id, document, {
                    reply_markup: keyboard,
                    parse_mode: "html",
                    caption: text,
                });
            }

            if (context.queryPayload.startsWith("qr_")) {
                const serverLocationName = context.queryPayload.split("_")[1];
                const configId = context.queryPayload.split("_")[2];
                if (!serverLocationName || !configId || !/^[0-9a-f-]{36}$/.test(configId)) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã QR-–∫–æ–¥–∞');
                }

                const server = await db.getServer({ serverLocationName });
                if (!server) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                const country = await db.getCountry({ country: server.country });
                if (!country) {
                    throw new Error('–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }
                const configData = await getWireguardClientConfig(server, configId);
                if (!configData) {
                    throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }

                const protocolLabel = server.type === "wg" ? "WireGuard" : "AmneziaWG";

                const modifiedConfig = configEdit(JSON.stringify(configData.data), protocolLabel).replaceAll(server.ip, `${serverLocationName.replaceAll("-", "").toLowerCase()}.${process.env.DOMAIN}`);
                const qrCode = await generateQR(modifiedConfig, context.from.id);
                if (!qrCode) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥');
                }

                const text = `üîê QR-–∫–æ–¥ ${protocolLabel} –¥–ª—è ${serverLocationName} (${country.flag} ${country.city}, ${country.country})`;

                const keyboard = new InlineKeyboardBuilder()
                    .textButton({
                        text: "üîô –ù–∞–∑–∞–¥",
                        payload: `config_${configId}`
                    });

                await sendPhoto(context.from.id, MediaSource.data(qrCode), {
                    caption: text,
                    parse_mode: "html",
                    reply_markup: keyboard
                });
            }

            if (context.queryPayload.startsWith("delete_")) {
                const serverLocationName = context.queryPayload.split("_")[1];
                const configId = context.queryPayload.split("_")[2];
                if (!serverLocationName || !configId || !/^[0-9a-f-]{36}$/.test(configId)) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                }

                const server = await db.getServer({ serverLocationName });
                if (!server) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                const country = await db.getCountry({ country: server.country });
                if (!country) {
                    throw new Error('–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }

                await db.setConfig({ configId, telegramId: context.from.id }, { $set: { deleted: true } });
                await wireguardDeleteConfig(context.from.id, server, configId);

                const text = `üóëÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${country.flag} ${server.country} (${server.city}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`;
                const keyboard = new InlineKeyboardBuilder()
                    .textButton({
                        text: "üîô –ù–∞–∑–∞–¥",
                        payload: `my_configs_1`
                    });

                await sendMessage(context.from.id, text, {
                    parse_mode: "html",
                    reply_markup: keyboard
                });
            }

        } catch (error) {
            console.error(`[ERROR][${errorId}][${context.from?.id || 'unknown'}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–ª–±—ç–∫–∞:`, error);
            if (context.from?.id && /^\d+$/.test(context.from.id)) {
                await sendMessage(context.from.id, 
                    `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (${process.env.SUPPORT_LINK}) —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ ${errorId}`, 
                    { parse_mode: "html" }
                );
            }
        }
    });
}