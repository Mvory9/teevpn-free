import { InlineKeyboardBuilder } from "puregram";
import cron from "node-cron";
import "dotenv/config";
import db from "../db/mongodb.js";
import { sendMessage } from "../bot/telegram.js";
import { getWireGuardClients, wireguardDisableConfig, wireguardEnableConfig } from "../services/wireguard.js";
import { v4 as uuidv4 } from 'uuid';

async function restartConfigsAtMidnight() {
    const errorId = uuidv4();
    try {
        if (!process.env.ORIGINAL_PROJECT) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ORIGINAL_PROJECT –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        const servers = await db.getServers();
        if (!servers || !Array.isArray(servers)) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤');
        }

        const MAX_CLIENTS_PER_RUN = 100;
        for (const server of servers) {
            const clientsOnServer = await getWireGuardClients(server);
            if (!clientsOnServer || !Array.isArray(clientsOnServer)) {
                console.warn(`[WARN][${errorId}][${server.serverLocationName}]: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤`);
                continue;
            }

            const freeClients = clientsOnServer.filter(client => client.name && client.name.startsWith("free_"));
            for (const client of freeClients.slice(0, MAX_CLIENTS_PER_RUN)) {
                const [_, clientTelegramId] = client.name.split("_");
                if (!clientTelegramId || !/^\d+$/.test(clientTelegramId)) {
                    console.warn(`[WARN][${errorId}]: –ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID –≤ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${client.name}`);
                    continue;
                }

                try {
                    const text = `üîÅ –¢—Ä–∞—Ñ–∏–∫ –æ–±–Ω—É–ª—ë–Ω. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.`;
                    const keyboard = new InlineKeyboardBuilder()
                        .urlButton({ text: `üì∂ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π VPN`, url: process.env.ORIGINAL_PROJECT });

                    await sendMessage(clientTelegramId, text, {
                        parse_mode: "html",
                        reply_markup: keyboard
                    });

                    await wireguardDisableConfig(server, client.id);
                    await wireguardEnableConfig(server, client.id);
                } catch (clientError) {
                    console.error(`[ERROR][${errorId}][${clientTelegramId}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ ${client.id}:`, clientError);
                    await sendMessage(clientTelegramId, 
                        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (${process.env.SUPPORT_LINK}) —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ ${errorId}`, 
                        { parse_mode: "html" }
                    );
                }
            }
        }
    } catch (error) {
        console.error(`[ERROR][${errorId}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:`, error);
        if (process.env.SUPPORT_LINK.includes('t.me')) {
            await sendMessage(process.env.ADMIN_ID, 
                `‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${error.message} (–ö–æ–¥: ${errorId})`, 
                { parse_mode: "html" }
            );
        }
    }
}

export async function setupCronRestartConfigsAtMidnight() {
    const errorId = uuidv4();
    try {
        cron.schedule("0 0 * * *", async () => {
            await restartConfigsAtMidnight();
        }, {
            timezone: "Europe/Moscow"
        });
        console.log("[INFO] Cron –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω");
    } catch (error) {
        console.error(`[ERROR][${errorId}]: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å cron –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:`, error);
        if (process.env.SUPPORT_LINK.includes('t.me')) {
            await sendMessage(process.env.ADMIN_ID, 
                `‚ö† –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron: ${error.message} (–ö–æ–¥: ${errorId})`, 
                { parse_mode: "html" }
            );
        }
        throw error;
    }
}